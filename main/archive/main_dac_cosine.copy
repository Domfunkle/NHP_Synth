#include <stdio.h>
#include <string.h>
#include "driver/dac_cosine.h"
#include "driver/uart.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "esp_system.h"

#define DAC_CHAN DAC_CHAN_0 // GPIO25
#define UART_NUM UART_NUM_0
#define UART_RX_BUF_SIZE 1024

static const char *TAG = "COS_DAC";
static int cosine_freq = 7500;
static dac_cosine_handle_t cos_handle = NULL;

void cosine_task(void *arg) {
    dac_cosine_config_t cos_cfg = {
        .chan_id = DAC_CHAN,
        .freq_hz = cosine_freq,
        .clk_src = DAC_COSINE_CLK_SRC_DEFAULT,
        .atten = DAC_COSINE_ATTEN_DEFAULT,
        .phase = DAC_COSINE_PHASE_0,
        .offset = 0,
        .flags = { .force_set_freq = 1 },
    };
    dac_cosine_new_channel(&cos_cfg, &cos_handle);
    dac_cosine_start(cos_handle);
    ESP_LOGI(TAG, "Hardware cosine wave output started on GPIO25");
    int last_freq = cosine_freq;
    while (1) {
        if (cosine_freq != last_freq) {
            dac_cosine_stop(cos_handle);
            dac_cosine_del_channel(cos_handle);
            cos_cfg.freq_hz = cosine_freq;
            dac_cosine_new_channel(&cos_cfg, &cos_handle);
            dac_cosine_start(cos_handle);
            ESP_LOGI(TAG, "Frequency updated to %d Hz", cosine_freq);
            last_freq = cosine_freq;
        }
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

void uart_cmd_task(void *arg) {
    vTaskDelay(pdMS_TO_TICKS(3000)); // Wait 3 seconds for serial monitor to connect
    const int uart_num = UART_NUM;
    uart_config_t uart_config = {
        .baud_rate = 115200,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    uart_driver_install(uart_num, UART_RX_BUF_SIZE, 0, 0, NULL, 0);
    uart_param_config(uart_num, &uart_config);
    uart_set_pin(uart_num, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    uint8_t ch;
    char cmd_buf[64];
    int cmd_pos = 0;
    while (1) {
        int len = uart_read_bytes(uart_num, &ch, 1, pdMS_TO_TICKS(100));
        if (len > 0) {
            if (ch == '\r' || ch == '\n') {
                if (cmd_pos > 0) {
                    cmd_buf[cmd_pos] = '\0';
                    if (strncmp(cmd_buf, "wf", 2) == 0) {
                        int freq = atoi(cmd_buf + 2);
                        if (freq >= 135 && freq <= 40000) {
                            cosine_freq = freq;
                            ESP_LOGI(TAG, "Received command: set frequency to %d Hz", freq);
                        } else {
                            ESP_LOGW(TAG, "Invalid frequency: %d (must be 100-40000)", freq);
                        }
                    }
                    cmd_pos = 0;
                }
            } else if (cmd_pos < (int)sizeof(cmd_buf) - 1) {
                cmd_buf[cmd_pos++] = ch;
            }
        }
    }
}

void app_main(void) {
    xTaskCreatePinnedToCore(cosine_task, "cosine_task", 2048, NULL, 5, NULL, 1);
    xTaskCreatePinnedToCore(uart_cmd_task, "uart_cmd_task", 2048, NULL, 5, NULL, 0);
}
