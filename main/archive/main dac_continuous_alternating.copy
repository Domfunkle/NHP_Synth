// Includes
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/dac_continuous.h"
#include "esp_log.h"
#include "driver/uart.h"

// Macros and Constants
#define TABLE_SIZE 512
#define FIXED_SAMPLE_RATE 12800 // 50Hz sample rate for DAC
#define MIN_FREQ 20
#define MAX_FREQ 20000
#define UART_NUM UART_NUM_0
#define UART_RX_BUF_SIZE 256

// Static Variables
static uint8_t cosine_table[TABLE_SIZE];
static volatile float current_freq_a = 50; // Default frequency
static volatile float current_freq_b = 50; // Default frequency
static const char *TAG = "dac_continuous_test";
static volatile float phase_a = 0.0f;
static volatile float phase_b = 0.0f;
static TaskHandle_t dac_task_handle = NULL;
static dac_continuous_handle_t dac_handle = NULL; // Make DAC handle global

// Function Declarations
static void generate_cosine_table(float frequency_a, float frequency_b, float phase_shift_a, float phase_shift_b);
static void dac_output_task(void *arg);
static void uart_cmd_task(void *arg);

// Function Definitions
static void generate_cosine_table(float frequency_a, float frequency_b, float phase_shift_a, float phase_shift_b) {
    // Disable DAC before updating
    if (dac_handle) {
        ESP_ERROR_CHECK(dac_continuous_disable(dac_handle));
        ESP_ERROR_CHECK(dac_continuous_del_channels(dac_handle));
    }
    // Generate interleaved cosine samples for channel A and B, one period of the lower frequency
    float min_freq = (frequency_a < frequency_b) ? frequency_a : frequency_b;
    float max_freq = (frequency_a > frequency_b) ? frequency_a : frequency_b;
    float freq_ratio_a = frequency_a / min_freq;
    float freq_ratio_b = frequency_b / min_freq;
    for (int i = 0; i < TABLE_SIZE / 2; ++i) {
        float phase_a_val = 2.0f * M_PI * freq_ratio_a * i / (TABLE_SIZE / 2) + phase_shift_a;
        float phase_b_val = 2.0f * M_PI * freq_ratio_b * i / (TABLE_SIZE / 2) + phase_shift_b;
        uint8_t value_a = (uint8_t)((cosf(phase_a_val) + 1.0f) * 127.5f);
        uint8_t value_b = (uint8_t)((cosf(phase_b_val) + 1.0f) * 127.5f);
        cosine_table[2 * i] = value_a;
        cosine_table[2 * i + 1] = value_b;
    }
    // Calculate new freq_hz for DAC
    float sample_rate = (TABLE_SIZE / 2) * ((frequency_a > frequency_b ? frequency_b : frequency_a)); // Use lower of a or b for dual channel
    ESP_LOGI(TAG, "Set DAC freq_hz to %.2f for commanded freq_a=%.2f, freq_b=%.2f", sample_rate, frequency_a, frequency_b);
    if (dac_handle) {
        dac_continuous_config_t cont_cfg = {
            .chan_mask = DAC_CHANNEL_MASK_ALL,
            .desc_num = 8,
            .buf_size = 2048,
            .offset = 0,
            .clk_src = DAC_DIGI_CLK_SRC_APLL,
            .chan_mode = DAC_CHANNEL_MODE_ALTER,
            .freq_hz = (uint32_t)sample_rate,
        };
        ESP_ERROR_CHECK(dac_continuous_new_channels(&cont_cfg, &dac_handle));
        ESP_ERROR_CHECK(dac_continuous_enable(dac_handle));
        ESP_ERROR_CHECK(dac_continuous_write_cyclically(dac_handle, cosine_table, sizeof(cosine_table), NULL));
    }
    ESP_LOGI(TAG, "Generated cosine table (one period, phase_a=%.2f, phase_b=%.2f)", phase_shift_a, phase_shift_b);
}

static void dac_output_task(void *arg) {
    dac_continuous_config_t cont_cfg = {
        .chan_mask = DAC_CHANNEL_MASK_ALL,
        .desc_num = 8,
        .buf_size = 2048,
        .offset = 0,
        .clk_src = DAC_DIGI_CLK_SRC_APLL,
        .chan_mode = DAC_CHANNEL_MODE_ALTER,
        .freq_hz = FIXED_SAMPLE_RATE,
    };
    ESP_ERROR_CHECK(dac_continuous_new_channels(&cont_cfg, &dac_handle));
    ESP_ERROR_CHECK(dac_continuous_enable(dac_handle));
    ESP_ERROR_CHECK(dac_continuous_write_cyclically(dac_handle, cosine_table, sizeof(cosine_table), NULL));
    while (1) {
        vTaskDelay(pdMS_TO_TICKS(1000)); // Keep the task alive
    }
}

static void uart_cmd_task(void *arg) {
    uart_config_t uart_config = {
        .baud_rate = 115200,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    esp_err_t err = uart_driver_install(UART_NUM, UART_RX_BUF_SIZE, 0, 0, NULL, 0);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "uart_driver_install failed: %d", err);
        vTaskDelete(NULL);
    }
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    ESP_LOGI(TAG, "UART command task started. Type 'help' for usage.");
    char cmd_buf[32];
    int cmd_pos = 0;
    while (1) {
        uint8_t ch;
        int len = uart_read_bytes(UART_NUM, &ch, 1, pdMS_TO_TICKS(100));
        if (len > 0) {
            if (ch == '\r' || ch == '\n') {
                cmd_buf[cmd_pos] = '\0';
                if (strncmp(cmd_buf, "wfa", 3) == 0) {
                    float freq = strtof(cmd_buf + 3, NULL);
                    if (freq >= MIN_FREQ && freq <= MAX_FREQ) {
                        current_freq_a = freq;
                        generate_cosine_table(current_freq_a, current_freq_b, phase_a, phase_b);
                        ESP_LOGI(TAG, "UART: Set channel A frequency to %f Hz", freq);
                    } else {
                        ESP_LOGW(TAG, "UART: Invalid frequency for channel A: %f (Allowed: %d-%d)", freq, MIN_FREQ, MAX_FREQ);
                    }
                } else if (strncmp(cmd_buf, "wfb", 3) == 0) {
                    float freq = strtof(cmd_buf + 3, NULL);
                    if (freq >= MIN_FREQ && freq <= MAX_FREQ) {
                        current_freq_b = freq;
                        generate_cosine_table(current_freq_a, current_freq_b, phase_a, phase_b);
                        ESP_LOGI(TAG, "UART: Set channel B frequency to %f Hz", freq);
                    } else {
                        ESP_LOGW(TAG, "UART: Invalid frequency for channel B: %f (Allowed: %d-%d)", freq, MIN_FREQ, MAX_FREQ);
                    }

                } else if (strcmp(cmd_buf, "buff") == 0) {
                    char buf_info[128];
                    snprintf(buf_info, sizeof(buf_info), "Output buffer content: A: %.2f Hz, B: %.2f Hz\r\n", current_freq_a, current_freq_b);
                    uart_write_bytes(UART_NUM, buf_info, strlen(buf_info));
                    if (dac_task_handle) vTaskSuspend(dac_task_handle);
                    // Output as comma-separated decimal values for Excel
                    for (int i = 0; i < sizeof(cosine_table); i++) {
                        snprintf(buf_info, sizeof(buf_info), "%d%s", cosine_table[i], (i < (int)sizeof(cosine_table) - 1) ? "," : "\r\n");
                        uart_write_bytes(UART_NUM, buf_info, strlen(buf_info));
                    }
                    if (dac_task_handle) vTaskResume(dac_task_handle);

                } else if (strcmp(cmd_buf, "help") == 0) {
                    const char *help_msg =
                        "Commands:\r\n"
                        "  wfa<freq>  Set channel A frequency in Hz (e.g. wfa1000)\r\n"
                        "  wfb<freq>  Set channel B frequency in Hz (e.g. wfb2000)\r\n"
                        "  buff       Output buffer content \r\n"
                        "  help       Show this help message\r\n";
                    uart_write_bytes(UART_NUM, help_msg, strlen(help_msg));   
                } else if (cmd_pos > 0) {
                    ESP_LOGW(TAG, "UART: Unknown command: '%s'", cmd_buf);
                }
                cmd_pos = 0;
            } else if (cmd_pos < (int)sizeof(cmd_buf) - 1) {
                cmd_buf[cmd_pos++] = ch;
            }
        }
    }
}

void app_main(void) {
    generate_cosine_table(current_freq_a, current_freq_b, phase_a, phase_b);
    ESP_LOGI(TAG, "Starting DAC cosine generator. Type 'help' in UART for usage. Frequency range: %d-%d Hz.", MIN_FREQ, MAX_FREQ);
    xTaskCreatePinnedToCore(dac_output_task, "dac_output_task", 4096, NULL, 5, &dac_task_handle, 1);
    xTaskCreatePinnedToCore(uart_cmd_task, "uart_cmd_task", 4096, NULL, 5, NULL, 0);
}