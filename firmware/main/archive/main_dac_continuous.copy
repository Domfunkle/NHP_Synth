// Includes
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/dac_continuous.h"
#include "esp_log.h"
#include "driver/uart.h"

// Macros and Constants
#define TABLE_SIZE 256
#define FIXED_SAMPLE_RATE 1e6
#define MIN_FREQ 40
#define MAX_FREQ 20000
#define UART_NUM UART_NUM_0
#define UART_RX_BUF_SIZE 256

// Static Variables
static uint8_t cosine_table[TABLE_SIZE];
static volatile int current_freq = 50; // Default frequency
static const char *TAG = "dac_continuous_test";

// Function Declarations
static void generate_cosine_table(void);
static void dac_output_task(void *arg);
static void uart_cmd_task(void *arg);

// Function Definitions
static void generate_cosine_table(void) {
    for (int i = 0; i < TABLE_SIZE; ++i) {
        float angle = 2.0f * M_PI * i / TABLE_SIZE;
        float value = cosf(angle);
        cosine_table[i] = (uint8_t)((value + 1.0f) * 127.5f);
    }
    ESP_LOGI(TAG, "Generated cosine table: %d points", TABLE_SIZE);
}

static void dac_output_task(void *arg) {
    dac_continuous_handle_t dac_handle;
    dac_continuous_config_t cont_cfg = {
        .chan_mask = DAC_CHANNEL_MASK_ALL,
        .desc_num = 8,
        .buf_size = 2048,
        .offset = 0,
        .clk_src = DAC_DIGI_CLK_SRC_APLL,
        .chan_mode = DAC_CHANNEL_MODE_ALTER,
        .freq_hz = FIXED_SAMPLE_RATE,
    };
    ESP_ERROR_CHECK(dac_continuous_new_channels(&cont_cfg, &dac_handle));
    ESP_ERROR_CHECK(dac_continuous_enable(dac_handle));
    float phase = 0.0f;
    while (1) {
        int freq = current_freq;
        // Clamp frequency for safety
        if (freq < MIN_FREQ) freq = MIN_FREQ;
        if (freq > MAX_FREQ) freq = MAX_FREQ;
        // In alternate channel mode, effective output frequency is doubled, so halve the phase increment
        float phase_inc = (float)TABLE_SIZE * freq / (2 * FIXED_SAMPLE_RATE);
        uint8_t out_buf[256];
        for (int i = 0; i < sizeof(out_buf); ++i) {
            int idx = (int)phase;
            out_buf[i] = cosine_table[idx];
            phase += phase_inc;
            if (phase >= TABLE_SIZE) phase -= TABLE_SIZE;
        }
        ESP_ERROR_CHECK(dac_continuous_write(dac_handle, out_buf, sizeof(out_buf), NULL, -1));
        taskYIELD();
    }
}

static void uart_cmd_task(void *arg) {
    uart_config_t uart_config = {
        .baud_rate = 115200,
        .data_bits = UART_DATA_8_BITS,
        .parity    = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
    };
    esp_err_t err = uart_driver_install(UART_NUM, UART_RX_BUF_SIZE, 0, 0, NULL, 0);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "uart_driver_install failed: %d", err);
        vTaskDelete(NULL);
    }
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
    ESP_LOGI(TAG, "UART command task started. Type 'help' for usage.");
    char cmd_buf[32];
    int cmd_pos = 0;
    while (1) {
        uint8_t ch;
        int len = uart_read_bytes(UART_NUM, &ch, 1, pdMS_TO_TICKS(100));
        if (len > 0) {
            if (ch == '\r' || ch == '\n') {
                cmd_buf[cmd_pos] = '\0';
                if (strncmp(cmd_buf, "wf", 2) == 0) {
                    int freq = atoi(cmd_buf + 2);
                    if (freq >= MIN_FREQ && freq <= MAX_FREQ) {
                        current_freq = freq;
                        ESP_LOGI(TAG, "UART: Set frequency to %d Hz", freq);
                    } else {
                        ESP_LOGW(TAG, "UART: Invalid frequency: %d (Allowed: %d-%d)", freq, MIN_FREQ, MAX_FREQ);
                    }
                } else if (strcmp(cmd_buf, "help") == 0) {
                    const char *help_msg =
                        "Commands:\r\n"
                        "  wf<freq>  Set waveform frequency in Hz (e.g. wf1000)\r\n"
                        "  help      Show this help message\r\n";
                    uart_write_bytes(UART_NUM, help_msg, strlen(help_msg));
                } else if (cmd_pos > 0) {
                    ESP_LOGW(TAG, "UART: Unknown command: '%s'", cmd_buf);
                }
                cmd_pos = 0;
            } else if (cmd_pos < (int)sizeof(cmd_buf) - 1) {
                cmd_buf[cmd_pos++] = ch;
            }
        }
    }
}

void app_main(void) {
    generate_cosine_table();
    ESP_LOGI(TAG, "Starting DAC cosine generator. Type 'help' in UART for usage. Frequency range: %d-%d Hz.", MIN_FREQ, MAX_FREQ);
    xTaskCreatePinnedToCore(dac_output_task, "dac_output_task", 4096, NULL, 5, NULL, 1);
    xTaskCreatePinnedToCore(uart_cmd_task, "uart_cmd_task", 4096, NULL, 5, NULL, 0);
}